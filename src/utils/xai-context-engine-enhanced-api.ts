// src/utils/xai-context-engine-enhanced-api.ts
// Version am√©lior√©e du moteur XAI utilisant l'API CNESST Donn√©es Qu√©bec
// Remplace le chargement de fichiers CSV par des donn√©es temps r√©el

// NOUVEAU
import { 
  agregateurCNESSTAPI, 
  obtenirContexteSectorielAPI, 
  initialiserAPIService,
  type ContexteSectorielEnrichi 
} from '../services/data_processors/aggregateur-donnees-cnesst-api';

// Types XAI enrichis
interface XAIExplanation {
  contexteSectoriel: string;
  justificationDonnees: string;
  recommandationPratique: string;
  tracabilite: string;
  niveauConfiance: number;
  sourcesDonnees: string[];
  visualisations?: VisualizationConfig[];
  metriquesTempsReel?: MetriquesTempsReel;
}

interface ProjectContext {
  nom: string;
  secteurSCIAN: string;
  description: string;
  risquesPrincipaux: string[];
  objectifs?: string[];
}

interface VisualizationConfig {
  type: 'bar' | 'pie' | 'line' | 'heatmap';
  titre: string;
  donnees: any[];
  config: any;
}

interface MetriquesTempsReel {
  derniereMiseAJour: string;
  couvertureDonnees: string;
  totalEnregistrements: number;
  fiabiliteScore: number;
}

class XAIContextEngineAPI {
  private contexteCache: Map<string, ContexteSectorielEnrichi> = new Map();
  private apiInitialisee: boolean = false;
  private statusConnexion: 'connectee' | 'erreur' | 'non-initialisee' = 'non-initialisee';

  /**
   * Initialise la connexion API au d√©marrage
   */
  async initialiser(): Promise<void> {
    try {
      console.log('üöÄ Initialisation du moteur XAI avec API CNESST...');
      
      const resultat = await initialiserAPIService();
      
      if (resultat.success) {
        this.apiInitialisee = true;
        this.statusConnexion = 'connectee';
        console.log(`‚úÖ Moteur XAI initialis√© - ${resultat.datasetsDisponibles} datasets disponibles`);
      } else {
        throw new Error(resultat.message);
      }
      
    } catch (error) {
      this.statusConnexion = 'erreur';
      console.error('‚ùå Erreur d\'initialisation du moteur XAI:', error);
      throw error;
    }
  }

  /**
   * G√©n√®re une explication XAI enrichie avec donn√©es temps r√©el
   */
  async genererExplicationXAI(
    critere: string,
    score: number,
    contexteProjet: ProjectContext
  ): Promise<XAIExplanation> {
    try {
      console.log(`üß† G√©n√©ration XAI pour crit√®re "${critere}" (secteur ${contexteProjet.secteurSCIAN})`);

      // S'assurer que l'API est initialis√©e
      if (!this.apiInitialisee) {
        await this.initialiser();
      }

      // R√©cup√©rer le contexte sectoriel enrichi depuis l'API
      const contexteSectoriel = await this.obtenirContexteSectorielEnrichi(contexteProjet.secteurSCIAN);
      
      // G√©n√©rer l'explication contextuelle
      const explication = await this.construireExplicationContextuelle(
        critere,
        score,
        contexteProjet,
        contexteSectoriel
      );

      // Ajouter les visualisations
      explication.visualisations = this.genererVisualisations(contexteSectoriel);
      
      // Ajouter les m√©triques temps r√©el
      explication.metriquesTempsReel = this.construireMetriquesTempsReel(contexteSectoriel);

      console.log(`‚úÖ Explication XAI g√©n√©r√©e avec niveau de confiance ${explication.niveauConfiance}/10`);
      
      return explication;

    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration XAI:', error);
      
      // Fallback vers explication g√©n√©rique en cas d'erreur API
      return this.genererExplicationFallback(critere, score, contexteProjet);
    }
  }

  /**
   * R√©cup√®re le contexte sectoriel enrichi avec cache intelligent
   */
  private async obtenirContexteSectorielEnrichi(secteurSCIAN: string): Promise<ContexteSectorielEnrichi> {
    try {
      // V√©rifier le cache local
      const cached = this.contexteCache.get(secteurSCIAN);
      if (cached) {
        console.log(`üìã Contexte secteur ${secteurSCIAN} r√©cup√©r√© du cache`);
        return cached;
      }

      // R√©cup√©rer depuis l'API
      console.log(`üåê R√©cup√©ration contexte secteur ${secteurSCIAN} depuis l'API...`);
      const contexte = await obtenirContexteSectorielAPI(secteurSCIAN);
      
      // Mise en cache
      this.contexteCache.set(secteurSCIAN, contexte);
      
      return contexte;
      
    } catch (error) {
      console.error(`‚ùå Erreur r√©cup√©ration contexte secteur ${secteurSCIAN}:`, error);
      throw error;
    }
  }

  /**
   * Construit l'explication contextuelle enrichie
   */
  private async construireExplicationContextuelle(
    critere: string,
    score: number,
    contexteProjet: ProjectContext,
    contexteSectoriel: ContexteSectorielEnrichi
  ): Promise<XAIExplanation> {
    
    // 1. Contexte sectoriel enrichi
    const contexteSectorielTexte = this.construireContexteSectoriel(contexteSectoriel);
    
    // 2. Justification bas√©e sur donn√©es r√©elles
    const justificationDonnees = this.construireJustificationDonnees(
      critere,
      score,
      contexteSectoriel
    );
    
    // 3. Recommandation pratique adapt√©e
    const recommandationPratique = this.construireRecommandationPratique(
      critere,
      score,
      contexteSectoriel,
      contexteProjet
    );
    
    // 4. Tra√ßabilit√© des sources
    const tracabilite = this.construireTracabilite(contexteSectoriel);
    
    // 5. Niveau de confiance calcul√©
    const niveauConfiance = this.calculerNiveauConfiance(contexteSectoriel);
    
    // 6. Sources de donn√©es
    const sourcesDonnees = this.construireSourcesDonnees(contexteSectoriel);

    return {
      contexteSectoriel: contexteSectorielTexte,
      justificationDonnees,
      recommandationPratique,
      tracabilite,
      niveauConfiance,
      sourcesDonnees
    };
  }

  /**
   * Construit le texte de contexte sectoriel
   */
  private construireContexteSectoriel(contexte: ContexteSectorielEnrichi): string {
    const risquesPrincipauxTexte = contexte.risquesPrincipaux
      .slice(0, 3)
      .map(r => `${r.type} (${r.pourcentage}%)`)
      .join(', ');

    const indicateursSpeciaux = [];
    if (contexte.indicateursSpecialises.tmsPrevalence > 10) {
      indicateursSpeciaux.push(`TMS: ${contexte.indicateursSpecialises.tmsPrevalence}%`);
    }
    if (contexte.indicateursSpecialises.lesionsPsychologiques > 5) {
      indicateursSpeciaux.push(`L√©sions psychologiques: ${contexte.indicateursSpecialises.lesionsPsychologiques}%`);
    }
    if (contexte.indicateursSpecialises.accidentsMachines > 10) {
      indicateursSpeciaux.push(`Accidents machines: ${contexte.indicateursSpecialises.accidentsMachines}%`);
    }

    return `Secteur ${contexte.nomSecteur} (SCIAN ${contexte.secteurSCIAN}) - Analyse bas√©e sur ${contexte.statistiquesGlobales.totalLesions.toLocaleString()} l√©sions professionnelles (${contexte.perioDeReference}). 

Risques dominants: ${risquesPrincipauxTexte}. 
${indicateursSpeciaux.length > 0 ? `Indicateurs sp√©cialis√©s: ${indicateursSpeciaux.join(', ')}.` : ''}

Agents causaux principaux: ${contexte.agentsCausauxDominants.slice(0, 3).map(a => a.type).join(', ')}.`;
  }

  /**
   * Construit la justification bas√©e sur les donn√©es
   */
  private construireJustificationDonnees(
    critere: string,
    score: number,
    contexte: ContexteSectorielEnrichi
  ): string {
    const baseJustification = `Score ${score}/10 pour le crit√®re "${critere}" bas√© sur l'analyse de ${contexte.statistiquesGlobales.totalLesions.toLocaleString()} dossiers CNESST (${contexte.perioDeReference}).`;
    
    // Justifications sp√©cifiques par crit√®re
    const justifications: Record<string, string> = {
      'Faisabilit√© technique': `Les technologies IA dans ce secteur montrent un potentiel ${this.evaluerPotentielIA(contexte)} pour traiter les ${contexte.risquesPrincipaux[0]?.type.toLowerCase() || 'risques principaux'}.`,
      'Valeur d\'affaires': `ROI estim√© √©lev√© compte tenu de la pr√©valence des ${contexte.risquesPrincipaux[0]?.type.toLowerCase() || 'incidents'} (${contexte.risquesPrincipaux[0]?.pourcentage || 0}% des l√©sions).`,
      'Conformit√© r√©glementaire': `Alignement avec les exigences CNESST pour la pr√©vention des ${contexte.risquesPrincipaux.slice(0, 2).map(r => r.type.toLowerCase()).join(' et ')}.`,
      'Temps de mise en march√©': `D√©ploiement facilit√© par l'existence de ${contexte.opportunitesIA.length} opportunit√©s IA identifi√©es dans ce secteur.`,
      'Co√ªt d\'impl√©mentation': `Co√ªts justifi√©s par la r√©duction potentielle des ${contexte.statistiquesGlobales.totalLesions} l√©sions annuelles dans ce secteur.`
    };

    const justificationSpecifique = justifications[critere] || '√âvaluation bas√©e sur les donn√©es sectorielles disponibles.';
    
    return `${baseJustification} ${justificationSpecifique}`;
  }

  /**
   * Construit la recommandation pratique
   */
  private construireRecommandationPratique(
    critere: string,
    score: number,
    contexte: ContexteSectorielEnrichi,
    projet: ProjectContext
  ): string {
    // Recommandations bas√©es sur les opportunit√©s IA identifi√©es
    const opportunitePrioritaire = contexte.opportunitesIA[0];
    
    if (score < 6) {
      return `**Action prioritaire**: ${opportunitePrioritaire?.description || 'Am√©liorer la faisabilit√© technique'}. 
      
√âtapes recommand√©es:
1. Analyser sp√©cifiquement les ${contexte.risquesPrincipaux[0]?.type.toLowerCase() || 'risques principaux'} de votre organisation
2. D√©ployer une solution pilote ciblant ${contexte.agentsCausauxDominants[0]?.type.toLowerCase() || 'les agents causaux principaux'}
3. Mesurer l'impact sur la r√©duction des incidents

Ressources: Consultez les guides CNESST pour le secteur ${contexte.nomSecteur}.`;
    } else if (score < 8) {
      return `**Optimisation sugg√©r√©e**: ${opportunitePrioritaire?.description || 'Renforcer les capacit√©s existantes'}.
      
Le projet montre un bon potentiel. Concentrez-vous sur l'int√©gration avec les syst√®mes existants et la formation des √©quipes.`;
    } else {
      return `**Excellence**: Projet bien positionn√© pour le d√©ploiement. 
      
Consid√©rez l'extension vers d'autres ${contexte.opportunitesIA.slice(1, 3).map(o => o.domaine.toLowerCase()).join(' et ')} pour maximiser l'impact.`;
    }
  }

  /**
   * Construit la tra√ßabilit√©
   */
  private construireTracabilite(contexte: ContexteSectorielEnrichi): string {
    return `Donn√©es source: API Donn√©es Qu√©bec - CNESST (${contexte.perioDeReference})
Derni√®re mise √† jour: ${contexte.statistiquesGlobales.derniereMiseAJour}
M√©thodologie: Agr√©gation de ${contexte.statistiquesGlobales.totalLesions.toLocaleString()} dossiers sur ${contexte.statistiquesGlobales.totalAnnees} ann√©es
Conformit√©: ISO 42001 (IA responsable), RGPD
R√©vision: Donn√©es actualis√©es automatiquement via API gouvernementale`;
  }

  /**
   * Calcule le niveau de confiance
   */
  private calculerNiveauConfiance(contexte: ContexteSectorielEnrichi): number {
    let confiance = 7; // Base

    // Augmenter selon la richesse des donn√©es
    if (contexte.statistiquesGlobales.totalLesions > 10000) confiance += 1;
    if (contexte.statistiquesGlobales.totalAnnees >= 5) confiance += 1;
    if (contexte.risquesPrincipaux.length >= 5) confiance += 0.5;
    if (contexte.opportunitesIA.length >= 4) confiance += 0.5;

    return Math.min(10, Math.round(confiance * 10) / 10);
  }

  /**
   * Construit la liste des sources
   */
  private construireSourcesDonnees(contexte: ContexteSectorielEnrichi): string[] {
    return [
      `CNESST - L√©sions professionnelles ${contexte.perioDeReference}`,
      'API Donn√©es Qu√©bec (donn√©es gouvernementales officielles)',
      'Classification SCIAN - Statistique Canada',
      'GenAISafety - Analyse IA-SST contextuelle',
      'ISO 45001:2018 - Syst√®mes de management SST'
    ];
  }

  /**
   * G√©n√®re les configurations de visualisation
   */
  private genererVisualisations(contexte: ContexteSectorielEnrichi): VisualizationConfig[] {
    return [
      {
        type: 'bar',
        titre: 'Risques principaux par fr√©quence',
        donnees: contexte.risquesPrincipaux.slice(0, 5).map(r => ({
          nom: r.type,
          valeur: r.pourcentage,
          tendance: r.tendance
        })),
        config: {
          colorScheme: 'category10',
          showValues: true
        }
      },
      {
        type: 'pie',
        titre: 'R√©partition des agents causaux',
        donnees: contexte.agentsCausauxDominants.slice(0, 6).map(a => ({
          nom: a.type,
          valeur: a.pourcentage,
          gravite: a.gravite
        })),
        config: {
          showLegend: true,
          colorMap: {
            'elevee': '#ff4444',
            'moyenne': '#ffaa44',
            'faible': '#44ff44'
          }
        }
      }
    ];
  }

  /**
   * Construit les m√©triques temps r√©el
   */
  private construireMetriquesTempsReel(contexte: ContexteSectorielEnrichi): MetriquesTempsReel {
    return {
      derniereMiseAJour: contexte.statistiquesGlobales.derniereMiseAJour,
      couvertureDonnees: contexte.perioDeReference,
      totalEnregistrements: contexte.statistiquesGlobales.totalLesions,
      fiabiliteScore: this.calculerNiveauConfiance(contexte)
    };
  }

  /**
   * G√©n√®re une explication de fallback en cas d'erreur API
   */
  private genererExplicationFallback(
    critere: string,
    score: number,
    contexteProjet: ProjectContext
  ): XAIExplanation {
    console.warn('‚ö†Ô∏è Utilisation du mode fallback pour l\'explication XAI');
    
    return {
      contexteSectoriel: `Secteur ${contexteProjet.secteurSCIAN} - Analyse en mode d√©grad√© (API non disponible)`,
      justificationDonnees: `Score ${score}/10 bas√© sur les crit√®res standards d'√©valuation IA-SST`,
      recommandationPratique: 'Recommandation g√©n√©rique - Am√©liorer la faisabilit√© technique avant d√©ploiement',
      tracabilite: 'Mode d√©grad√© - Donn√©es locales uniquement',
      niveauConfiance: 5,
      sourcesDonnees: ['Crit√®res d\'√©valuation standards'],
      metriquesTempsReel: {
        derniereMiseAJour: new Date().toISOString().split('T')[0],
        couvertureDonnees: 'Limit√©e',
        totalEnregistrements: 0,
        fiabiliteScore: 5
      }
    };
  }

  /**
   * Fonctions utilitaires
   */
  private evaluerPotentielIA(contexte: ContexteSectorielEnrichi): string {
    const opportunitesElevees = contexte.opportunitesIA.filter(o => o.potentiel === 'eleve').length;
    if (opportunitesElevees >= 2) return '√©lev√©';
    if (opportunitesElevees >= 1) return 'moyen';
    return 'mod√©r√©';
  }

  /**
   * M√©thodes publiques utilitaires
   */
  
  // Obtenir le statut du moteur
  obtenirStatut(): {
    statusConnexion: string;
    apiInitialisee: boolean;
    secteursMisEnCache: number;
  } {
    return {
      statusConnexion: this.statusConnexion,
      apiInitialisee: this.apiInitialisee,
      secteursMisEnCache: this.contexteCache.size
    };
  }

  // Vider le cache
  viderCache(): void {
    this.contexteCache.clear();
    agregateurCNESSTAPI.viderCache();
    console.log('üóëÔ∏è Cache moteur XAI vid√©');
  }

  // Pr√©-charger des secteurs populaires
  async prechargerSecteurs(): Promise<void> {
    if (!this.apiInitialisee) {
      await this.initialiser();
    }

    const secteursPopulaires = ['23', '31-33', '62', '44-45', '48-49'];
    console.log('üöÄ Pr√©-chargement des secteurs populaires...');

    for (const secteur of secteursPopulaires) {
      try {
        await this.obtenirContexteSectorielEnrichi(secteur);
        console.log(`‚úÖ Secteur ${secteur} pr√©-charg√© dans le moteur XAI`);
      } catch (error) {
        console.warn(`‚ö†Ô∏è √âchec pr√©-chargement secteur ${secteur}:`, error);
      }
    }
  }
}

// Instance singleton
export const xaiEngineAPI = new XAIContextEngineAPI();

// Export des fonctions de commodit√©
export const initialiserMoteaurXAI = async () => {
  return await xaiEngineAPI.initialiser();
};

export const genererExplicationComplete = async (
  critere: string,
  score: number,
  contexteProjet: ProjectContext
): Promise<XAIExplanation> => {
  return await xaiEngineAPI.genererExplicationXAI(critere, score, contexteProjet);
};

export const prechargerSecteursXAI = async () => {
  return await xaiEngineAPI.prechargerSecteurs();
};

// Export des types
export type { XAIExplanation, ProjectContext, VisualizationConfig, MetriquesTempsReel };