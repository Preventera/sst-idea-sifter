// src/components/data-loaders/CNESSTDataLoader.tsx
import { useEffect, useState } from 'react';
import { chargerDonneesCNESST } from '../../utils/xai-context-engine';

// Types pour les données CNESST
interface CNESSTDataLoaderProps {
  onLoadComplete?: () => void;
  onLoadError?: (error: Error) => void;
}

const CNESSTDataLoader: React.FC<CNESSTDataLoaderProps> = ({ 
  onLoadComplete, 
  onLoadError 
}) => {
  const [isLoading, setIsLoading] = useState(false);
  const [isLoaded, setIsLoaded] = useState(false);
  const [error, setError] = useState<Error | null>(null);

  useEffect(() => {
    const loadCNESSTData = async () => {
      if (isLoaded || isLoading) return;
      
      setIsLoading(true);
      try {
        console.log("Chargement des données CNESST...");
        
        // Liste des fichiers CSV à charger
        const fichiers = [
          { nom: 'lesions2023 3.csv', contenu: await fetchCSVContent('lesions2023 3.csv') },
          { nom: 'lesions2022 2.csv', contenu: await fetchCSVContent('lesions2022 2.csv') },
          { nom: 'lesions2021 2.csv', contenu: await fetchCSVContent('lesions2021 2.csv') },
          { nom: 'lesions2020 2.csv', contenu: await fetchCSVContent('lesions2020 2.csv') },
          { nom: 'lesions2019 2.csv', contenu: await fetchCSVContent('lesions2019 2.csv') },
          { nom: 'lesions2018 1.csv', contenu: await fetchCSVContent('lesions2018 1.csv') },
        ];
        
        await chargerDonneesCNESST(fichiers);
        setIsLoaded(true);
        console.log("Données CNESST chargées avec succès");
        onLoadComplete?.();
      } catch (err) {
        const error = err instanceof Error ? err : new Error('Erreur inconnue lors du chargement des données CNESST');
        console.error("Erreur lors du chargement des données CNESST:", error);
        setError(error);
        onLoadError?.(error);
      } finally {
        setIsLoading(false);
      }
    };

    loadCNESSTData();
  }, [onLoadComplete, onLoadError, isLoaded, isLoading]);

  // Fonction utilitaire pour charger le contenu d'un fichier CSV
  async function fetchCSVContent(filename: string): Promise<string> {
    try {
      // Ajustez le chemin selon l'emplacement de vos fichiers CSV
      const response = await fetch(`/data/${filename}`);
      if (!response.ok) {
        throw new Error(`Impossible de charger le fichier ${filename}: ${response.statusText}`);
      }
      return await response.text();
    } catch (error) {
      console.error(`Erreur lors du chargement de ${filename}:`, error);
      throw error;
    }
  }

  // Rendu d'un composant invisible qui charge simplement les données
  return null;
};

export default CNESSTDataLoader;