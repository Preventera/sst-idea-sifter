import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { AlertCircle, Lightbulb, Save, X, Wand2 } from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/components/ui/use-toast';
import { AIEnhancedNameInput } from '@/components/project-form/ai-enhanced-name-input';
import { ProjectDescriptionGenerator } from '@/components/ai-assistant/project-description-generator';

interface Criteria {
  technicalFeasibility: number;
  businessValue: number;
  riskReduction: number;
  implementationCost: number;
  timeToMarket: number;
  stakeholderSupport: number;
  regulatoryCompliance: number;
}

interface Project {
  id?: string;
  name: string;
  description: string;
  sector: string;
  criteria: Criteria;
  score: number;
  priority: 'Haute' | 'Moyenne' | 'Faible';
  createdAt?: string;
}

interface ProjectFormProps {
  project?: Project;
  onSave: (project: Project) => void;
  onCancel: () => void;
}

const criteriaLabels = {
  technicalFeasibility: 'Faisabilit√© technique',
  businessValue: 'Valeur d\'affaires',
  riskReduction: 'R√©duction des risques',
  implementationCost: 'Co√ªt d\'impl√©mentation',
  timeToMarket: 'Temps de mise en march√©',
  stakeholderSupport: 'Support des parties prenantes',
  regulatoryCompliance: 'Conformit√© r√©glementaire'
};

const sectors = [
  'Agriculture, foresterie, p√™che et chasse',
  'Extraction mini√®re, exploitation en carri√®re, et extraction de p√©trole et de gaz',
  'Services publics',
  'Construction',
  'Fabrication',
  'Commerce de gros',
  'Commerce de d√©tail',
  'Transport et entreposage',
  'Industrie de l\'information et industrie culturelle',
  'Finance et assurances',
  'Services immobiliers et services de location et de location √† bail',
  'Services professionnels, scientifiques et techniques',
  'Gestion de soci√©t√©s et d\'entreprises',
  'Services administratifs, services de soutien, services de gestion des d√©chets et services d\'assainissement',
  'Services d\'enseignement',
  'Soins de sant√© et assistance sociale',
  'Arts, spectacles et loisirs',
  'Services d\'h√©bergement et de restauration',
  'Autres services (sauf les administrations publiques)',
  'Administrations publiques'
];

export function ProjectForm({ project, onSave, onCancel }: ProjectFormProps) {
  const { toast } = useToast();
  const [formData, setFormData] = useState<Project>({
    name: '',
    description: '',
    sector: '',
    criteria: {
      technicalFeasibility: 5,
      businessValue: 5,
      riskReduction: 5,
      implementationCost: 5,
      timeToMarket: 5,
      stakeholderSupport: 5,
      regulatoryCompliance: 5
    },
    score: 0,
    priority: 'Moyenne'
  });

  const [generatedDescriptions, setGeneratedDescriptions] = useState<string[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [activeTab, setActiveTab] = useState('basic');

  useEffect(() => {
    if (project) {
      setFormData(project);
    }
  }, [project]);

  useEffect(() => {
    const score = calculateScore(formData.criteria);
    const priority = calculatePriority(score);
    setFormData(prev => ({ ...prev, score, priority }));
  }, [formData.criteria]);

  const calculateScore = (criteria: Criteria): number => {
    const weights = {
      technicalFeasibility: 0.2,
      businessValue: 0.25,
      riskReduction: 0.2,
      implementationCost: 0.1,
      timeToMarket: 0.1,
      stakeholderSupport: 0.1,
      regulatoryCompliance: 0.05
    };

    let totalScore = 0;
    Object.entries(criteria).forEach(([key, value]) => {
      const weight = weights[key as keyof typeof weights];
      // Le co√ªt d'impl√©mentation est invers√© (plus le co√ªt est bas, plus le score est √©lev√©)
      const adjustedValue = key === 'implementationCost' ? 11 - value : value;
      totalScore += adjustedValue * weight;
    });

    return Math.round(totalScore * 10) / 10;
  };

  const calculatePriority = (score: number): 'Haute' | 'Moyenne' | 'Faible' => {
    if (score >= 8) return 'Haute';
    if (score >= 6) return 'Moyenne';
    return 'Faible';
  };

  const handleCriteriaChange = (key: keyof Criteria, value: number[]) => {
    setFormData(prev => ({
      ...prev,
      criteria: {
        ...prev.criteria,
        [key]: value[0]
      }
    }));
  };

  const handleGenerateIdeas = async () => {
    if (!formData.sector) {
      toast({
        title: "Secteur requis",
        description: "Veuillez s√©lectionner un secteur avant de g√©n√©rer des id√©es.",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);
    try {
      // Cr√©er le texte des crit√®res pour le contexte
      const criteriaText = Object.entries(formData.criteria)
        .map(([key, value]) => `${criteriaLabels[key as keyof typeof criteriaLabels]}: ${value}/10`)
        .join(', ');

      // Appeler le g√©n√©rateur de description avec le nouveau prompt structur√©
      const descriptions = await generateProjectDescriptions(formData.sector, criteriaText);
      setGeneratedDescriptions(descriptions);
      setActiveTab('ai-assistant');
      
      toast({
        title: "Id√©es g√©n√©r√©es avec succ√®s",
        description: `${descriptions.length} id√©es de projets IA-SST ont √©t√© g√©n√©r√©es.`
      });
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration:', error);
      toast({
        title: "Erreur de g√©n√©ration",
        description: "Impossible de g√©n√©rer les id√©es. Veuillez r√©essayer.",
        variant: "destructive"
      });
    } finally {
      setIsGenerating(false);
    }
  };

  const generateProjectDescriptions = async (sector: string, criteriaText: string): Promise<string[]> => {
    // Cette fonction devrait appeler l'API avec le prompt structur√© en 8 √©tapes
    // Pour l'instant, nous retournons un exemple
    return [
      `üéØ PROJET IA-SST: Syst√®me de pr√©vention intelligent pour ${sector}

√âtape 1 : Identification du probl√®me
- Dans le secteur ${sector}, le principal risque concerne la d√©tection tardive des situations dangereuses
- Ce probl√®me entra√Æne des accidents √©vitables et des co√ªts op√©rationnels √©lev√©s

√âtape 2 : Applicabilit√© de l'IA
- Vision par ordinateur pour analyser les comportements √† risque en temps r√©el
- Apprentissage automatique pour pr√©dire les incidents bas√©s sur les patterns historiques

√âtape 3 : Conception de la solution
- Architecture modulaire avec capteurs IoT et cam√©ras intelligentes
- Tableaux de bord HSE avec alertes pr√©dictives et rapports automatis√©s

√âtape 4 : Donn√©es n√©cessaires
- Historiques d'incidents des 5 derni√®res ann√©es
- Donn√©es de capteurs environnementaux (temp√©rature, bruit, gaz)
- Images/vid√©os des zones de travail

√âtape 5 : D√©veloppement du mod√®le
- Algorithmes de deep learning pour reconnaissance d'images
- M√©triques: pr√©cision >95%, temps de r√©ponse <2 secondes

√âtape 6 : Int√©gration dans le syst√®me HSE
- API REST pour int√©gration avec syst√®mes existants
- Formation de 40h pour les pr√©venteurs et superviseurs

√âtape 7 : √âvaluation continue
- R√©duction de 30% des incidents dans les 12 premiers mois
- Am√©lioration continue bas√©e sur les retours utilisateurs

√âtape 8 : Cat√©gorie ELON
- Cat√©gorie prioritaire: **Op√©rations**
- Critical car 70% des accidents surviennent pendant les op√©rations de routine`
    ];
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.name.trim() || !formData.sector) {
      toast({
        title: "Champs requis",
        description: "Veuillez remplir le nom du projet et s√©lectionner un secteur.",
        variant: "destructive"
      });
      return;
    }

    try {
      const projectData = {
        ...formData,
        id: project?.id || crypto.randomUUID(),
        createdAt: project?.createdAt || new Date().toISOString()
      };

      if (project?.id) {
        // Mise √† jour
        const { error } = await supabase
          .from('projects')
          .update({
            name: projectData.name,
            description: projectData.description,
            sector: projectData.sector,
            criteria: projectData.criteria,
            score: projectData.score,
            priority: projectData.priority
          })
          .eq('id', project.id);

        if (error) throw error;
      } else {
        // Cr√©ation
        const { error } = await supabase
          .from('projects')
          .insert([{
            id: projectData.id,
            name: projectData.name,
            description: projectData.description,
            sector: projectData.sector,
            criteria: projectData.criteria,
            score: projectData.score,
            priority: projectData.priority,
            created_at: projectData.createdAt
          }]);

        if (error) throw error;
      }

      onSave(projectData);
      toast({
        title: project ? "Projet mis √† jour" : "Projet cr√©√©",
        description: `Le projet "${projectData.name}" a √©t√© ${project ? 'mis √† jour' : 'cr√©√©'} avec succ√®s.`
      });
    } catch (error) {
      console.error('Erreur lors de la sauvegarde:', error);
      toast({
        title: "Erreur de sauvegarde",
        description: "Une erreur est survenue lors de la sauvegarde.",
        variant: "destructive"
      });
    }
  };

  const useGeneratedDescription = (description: string) => {
    setFormData(prev => ({ ...prev, description }));
    setActiveTab('basic');
    toast({
      title: "Description appliqu√©e",
      description: "La description g√©n√©r√©e a √©t√© appliqu√©e au projet."
    });
  };

  return (
    <div className="w-full max-w-4xl mx-auto">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center justify-between">
            <span>{project ? 'Modifier le projet' : 'Nouveau projet IA-SST'}</span>
            <div className="flex items-center gap-2">
              <Badge variant={formData.priority === 'Haute' ? 'destructive' : formData.priority === 'Moyenne' ? 'default' : 'secondary'}>
                {formData.priority}
              </Badge>
              <Badge variant="outline">Score: {formData.score}/10</Badge>
            </div>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-3">
              <TabsTrigger value="basic">Informations de base</TabsTrigger>
              <TabsTrigger value="criteria">Crit√®res d'√©valuation</TabsTrigger>
              <TabsTrigger value="ai-assistant">Assistant IA</TabsTrigger>
            </TabsList>

            <TabsContent value="basic" className="space-y-4">
              <form onSubmit={handleSubmit} className="space-y-4">
                <div className="space-y-2">
                  <Label htmlFor="name">Nom du projet *</Label>
                  <AIEnhancedNameInput
                    value={formData.name}
                    onChange={(value) => setFormData(prev => ({ ...prev, name: value }))}
                    sector={formData.sector}
                    criteria={formData.criteria}
                  />
                </div>

                <div className="space-y-2">
                  <Label htmlFor="sector">Secteur d'activit√© *</Label>
                  <Select value={formData.sector} onValueChange={(value) => setFormData(prev => ({ ...prev, sector: value }))}>
                    <SelectTrigger>
                      <SelectValue placeholder="S√©lectionner un secteur" />
                    </SelectTrigger>
                    <SelectContent>
                      {sectors.map((sector) => (
                        <SelectItem key={sector} value={sector}>
                          {sector}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Description du projet</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="D√©crivez votre projet d'IA appliqu√©e √† la SST..."
                    rows={4}
                  />
                </div>

                <div className="flex gap-2">
                  <Button type="submit" className="flex-1">
                    <Save className="w-4 h-4 mr-2" />
                    {project ? 'Mettre √† jour' : 'Cr√©er le projet'}
                  </Button>
                  <Button type="button" variant="outline" onClick={onCancel}>
                    <X className="w-4 h-4 mr-2" />
                    Annuler
                  </Button>
                </div>
              </form>
            </TabsContent>

            <TabsContent value="criteria" className="space-y-6">
              {Object.entries(criteriaLabels).map(([key, label]) => (
                <div key={key} className="space-y-2">
                  <div className="flex justify-between items-center">
                    <Label>{label}</Label>
                    <Badge variant="outline">{formData.criteria[key as keyof Criteria]}/10</Badge>
                  </div>
                  <Slider
                    value={[formData.criteria[key as keyof Criteria]]}
                    onValueChange={(value) => handleCriteriaChange(key as keyof Criteria, value)}
                    max={10}
                    min={1}
                    step={1}
                    className="w-full"
                  />
                  <div className="flex justify-between text-xs text-gray-500">
                    <span>Faible</span>
                    <span>√âlev√©</span>
                  </div>
                </div>
              ))}

              <div className="mt-6 p-4 bg-blue-50 rounded-lg">
                <div className="flex items-center gap-2 mb-2">
                  <AlertCircle className="w-5 h-5 text-blue-600" />
                  <span className="font-medium text-blue-900">Score calcul√©</span>
                </div>
                <p className="text-sm text-blue-800">
                  Score global: <strong>{formData.score}/10</strong> - Priorit√©: <strong>{formData.priority}</strong>
                </p>
              </div>
            </TabsContent>

            <TabsContent value="ai-assistant" className="space-y-4">
              <div className="flex items-center justify-between">
                <h3 className="text-lg font-medium">Assistant IA pour la g√©n√©ration d'id√©es</h3>
                <Button 
                  onClick={handleGenerateIdeas} 
                  disabled={isGenerating || !formData.sector}
                  variant="outline"
                >
                  <Wand2 className="w-4 h-4 mr-2" />
                  {isGenerating ? 'G√©n√©ration en cours...' : 'G√©n√©rer des id√©es'}
                </Button>
              </div>

              {!formData.sector && (
                <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <p className="text-yellow-800 text-sm">
                    Veuillez d'abord s√©lectionner un secteur d'activit√© dans l'onglet "Informations de base".
                  </p>
                </div>
              )}

              {generatedDescriptions.length > 0 && (
                <div className="space-y-4">
                  <h4 className="font-medium">Id√©es de projets g√©n√©r√©es:</h4>
                  {generatedDescriptions.map((description, index) => (
                    <div key={index} className="border rounded-lg p-4 bg-white">
                      <pre className="text-sm text-gray-700 mb-3 whitespace-pre-wrap font-sans">
                        {description}
                      </pre>
                      <Button 
                        onClick={() => useGeneratedDescription(description)}
                        size="sm"
                        variant="outline"
                      >
                        <Lightbulb className="w-4 h-4 mr-2" />
                        Utiliser cette description
                      </Button>
                    </div>
                  ))}
                </div>
              )}

              {generatedDescriptions.length === 0 && formData.sector && (
                <div className="p-8 text-center text-gray-500">
                  <Lightbulb className="w-12 h-12 mx-auto mb-4 text-gray-300" />
                  <p>Cliquez sur "G√©n√©rer des id√©es" pour obtenir des suggestions de projets IA-SST personnalis√©es pour votre secteur.</p>
                </div>
              )}
            </TabsContent>
          </Tabs>
        </CardContent>
      </Card>
    </div>
  );
}