// Fichier: src/components/project-form/ai-enhanced-name-input.tsx
// Version hybride: Structure existante + IntÃ©gration ProfileScian

import React, { useState } from 'react';
import { Input } from '@/components/ui/input';
import AITextEnhancer from '@/components/ai-assistant/ai-text-enhancer';
import LLMSelector, { LLMProvider } from '@/components/ai-assistant/llm-selector';
import { useAIAssistant } from '@/hooks/use-ai-assistant';
import { Criteria } from '@/types/project';
import { SCIAN_SECTORS } from '@/data/scian-sectors';

interface AIEnhancedNameInputProps {
  name: string;
  setName: (name: string) => void;
  criteria: Criteria;
  scianSectorId?: string;
}

const AIEnhancedNameInput = ({ name, setName, criteria, scianSectorId }: AIEnhancedNameInputProps) => {
  const [selectedLLM, setSelectedLLM] = useState<LLMProvider>('claude');
  const { generateContent, analyzeContent, isLoading } = useAIAssistant();
  
  console.log('AIEnhancedNameInput rendered'); // Debug log

  // ðŸ†• NOUVELLE FONCTION: RÃ©cupÃ©rer les donnÃ©es contextuelles ProfileScian
  const getContextualData = () => {
    // DonnÃ©es du secteur SCIAN
    const sectorData = SCIAN_SECTORS.find(s => s.id === scianSectorId);
    
    // RÃ©cupÃ©rer les donnÃ©es du profil SCIAN depuis localStorage (si disponible)
    const profileData = localStorage.getItem('profileScianData');
    let parsedProfile = null;
    
    try {
      if (profileData) {
        parsedProfile = JSON.parse(profileData);
      }
    } catch (error) {
      console.warn('Erreur lors de la lecture du profil SCIAN:', error);
    }

    return {
      sector: sectorData,
      profile: parsedProfile
    };
  };

  // ðŸ†• NOUVELLE FONCTION: Construire le contexte enrichi
  const buildEnrichedContext = () => {
    const { sector, profile } = getContextualData();
    
    let contextualInfo = "";

    // Ajout du contexte sectoriel dÃ©taillÃ©
    if (sector) {
      contextualInfo += `\n--- CONTEXTE SECTORIEL DÃ‰TAILLÃ‰ ---\n`;
      contextualInfo += `Secteur: ${sector.name} (${sector.description})\n`;
      contextualInfo += `Risques principaux: ${sector.statistics?.accidentCauses?.join(', ') || 'Non spÃ©cifiÃ©s'}\n`;
      contextualInfo += `Zones de prÃ©vention: ${sector.statistics?.keyPreventionAreas?.join(', ') || 'Non spÃ©cifiÃ©es'}\n`;
      contextualInfo += `Taux de mortalitÃ©: ${sector.statistics?.mortalityRate || 'Non disponible'}\n`;
      contextualInfo += `Potentiel IA: ${sector.riskFactors.aiPreventivePotential}/5\n`;
    }

    // Ajout du contexte organisationnel (si profil disponible)
    if (profile) {
      contextualInfo += `\n--- CONTEXTE ORGANISATIONNEL ---\n`;
      if (profile.company?.size) {
        contextualInfo += `Taille organisation: ${profile.company.size}\n`;
      }
      if (profile.system?.selectedMethodologies?.length > 0) {
        contextualInfo += `MÃ©thodologies SST: ${profile.system.selectedMethodologies.slice(0, 3).join(', ')}\n`;
      }
      if (profile.company?.industry) {
        contextualInfo += `Industrie spÃ©cifique: ${profile.company.industry}\n`;
      }
      if (profile.risks?.specificRisks?.length > 0) {
        contextualInfo += `Risques identifiÃ©s: ${profile.risks.specificRisks.slice(0, 3).join(', ')}\n`;
      }
    }

    return contextualInfo;
  };
  
  const generateProjectIdeas = async () => {
    console.log('GÃ©nÃ©ration d\'idÃ©es de projet dÃ©marrÃ©e'); // Debug log
    
    const criteriaText = Object.entries(criteria)
      .map(([key, value]) => `${key}: ${value}/10`)
      .join(', ');
    
    // ðŸ†• ENRICHISSEMENT: Contexte enrichi avec ProfileScian
    const enrichedContext = buildEnrichedContext();
    const baseContext = scianSectorId ? `Secteur SCIAN: ${scianSectorId}` : '';
    const fullContext = baseContext + enrichedContext;
    
    const prompts = [
      `GÃ©nÃ¨re une description de projet IA-SST innovant basÃ©e sur ces critÃ¨res: ${criteriaText}`,
      `Propose un projet IA-SST axÃ© sur la prÃ©vention avec ces scores: ${criteriaText}`,
      `SuggÃ¨re un projet IA-SST pour amÃ©liorer la sÃ©curitÃ© au travail: ${criteriaText}`
    ];
    
    // Prendre le premier prompt pour une gÃ©nÃ©ration simple
    const prompt = prompts[0];
    
    let result = null;
    
    try {
      if (selectedLLM === 'openai') {
        result = await generateContent({
          type: 'project_description',
          prompt,
          context: fullContext
        });
      } else {
        // ðŸ†• ENRICHISSEMENT: Prompt contextualisÃ© avec donnÃ©es ProfileScian
        const contextualizedPrompt = `Tu es un expert HSE spÃ©cialisÃ© dans l'application de l'intelligence artificielle pour la prÃ©vention des accidents et l'amÃ©lioration de la performance sÃ©curitÃ©. 

${enrichedContext}

GÃ©nÃ¨re une Ã©tude de cas d'usage d'IA basÃ©e sur ces critÃ¨res: ${criteriaText}.

CONSIGNES: Adapte spÃ©cifiquement ta rÃ©ponse aux risques sectoriels et au contexte organisationnel mentionnÃ©s ci-dessus.

Ã‰tape 1 : Identification du problÃ¨me
- Dans le secteur ${scianSectorId || "concernÃ©"}, le principal risque liÃ© Ã  ces critÃ¨res concerne: [description spÃ©cifique adaptÃ©e aux risques sectoriels].
- Ce problÃ¨me entraÃ®ne [impact en termes de sÃ©curitÃ©, coÃ»ts, opÃ©rations].

Ã‰tape 2 : ApplicabilitÃ© de l'IA
- Explique comment des techniques IA peuvent rÃ©soudre ce problÃ¨me spÃ©cifique.
- Met en Ã©vidence la valeur ajoutÃ©e de l'IA pour la prÃ©vention proactive dans ce contexte.

Ã‰tape 3 : Conception de la solution
- Propose une architecture IA adaptÃ©e aux critÃ¨res fournis et au secteur.
- DÃ©taille les modules clÃ©s: alertes en temps rÃ©el, tableaux de bord HSE, etc.

Ã‰tape 4 : DonnÃ©es nÃ©cessaires
- Liste les sources de donnÃ©es pertinentes pour ce cas d'usage sectoriel.
- DÃ©cris le processus de prÃ©paration des donnÃ©es spÃ©cifiques au secteur.

Ã‰tape 5 : DÃ©veloppement du modÃ¨le
- SÃ©lectionne un algorithme adaptÃ© Ã  ce cas d'usage et aux contraintes sectorielles.
- DÃ©cris les mÃ©triques de performance et mÃ©thodes de test appropriÃ©es.

Ã‰tape 6 : IntÃ©gration dans le systÃ¨me HSE
- Explique comment intÃ©grer cette solution Ã  l'environnement existant du secteur.
- DÃ©cris la formation nÃ©cessaire pour les utilisateurs en tenant compte du contexte organisationnel.

Ã‰tape 7 : Ã‰valuation continue
- DÃ©finis des mÃ©triques de succÃ¨s pertinentes pour ce projet et ce secteur.
- Propose une stratÃ©gie d'amÃ©lioration continue adaptÃ©e.

Ã‰tape 8 : CatÃ©gorie ELON
- Indique la catÃ©gorie prioritaire: [Ã‰quipement / Lieux / OpÃ©rations / Nature Humaine].
- Explique pourquoi cette catÃ©gorie est critique pour ce projet dans ce secteur spÃ©cifique.

IMPORTANT: Utilise les informations contextuelles fournies pour personnaliser chaque Ã©tape.`;

        result = await analyzeContent({
          analysisType: 'project_ideas',
          text: contextualizedPrompt,
          context: fullContext
        });
      }
      
      if (result) {
        setName(result);
        console.log('RÃ©sultat gÃ©nÃ©rÃ©:', result); // Debug log
      }
    } catch (error) {
      console.error('Erreur lors de la gÃ©nÃ©ration:', error);
    }
  };

  // ðŸ†• FONCTION: Afficher le contexte disponible
  const getContextSummary = () => {
    const { sector, profile } = getContextualData();
    const elements = [];
    
    if (sector) {
      elements.push(`Secteur: ${sector.name}`);
    }
    if (profile?.company?.size) {
      elements.push(`Org: ${profile.company.size}`);
    }
    if (profile?.system?.selectedMethodologies?.length > 0) {
      elements.push(`${profile.system.selectedMethodologies.length} mÃ©thodologies SST`);
    }
    
    return elements.length > 0 ? elements.join(' â€¢ ') : 'Contexte de base uniquement';
  };
  
  return (
    <div className="mb-6 space-y-4">
      <div>
        <label htmlFor="project-name" className="block text-sm font-medium text-gray-700 mb-1">
          Nom / Description du projet
        </label>
        <Input
          id="project-name"
          placeholder="Ex: CamÃ©ra intelligente pour dÃ©tecter le non-port des EPI"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="w-full"
        />
      </div>
      
      {/* ðŸ†• AMÃ‰LIORATION: SÃ©lecteur LLM avec contexte enrichi */}
      <div className="border-t pt-4">
        <h4 className="text-sm font-medium text-gray-700 mb-2">ðŸ¤– Assistant IA pour gÃ©nÃ©rer des idÃ©es</h4>
        
        {/* ðŸ†• AJOUT: Affichage du contexte disponible */}
        <div className="text-xs text-gray-500 mb-2 p-2 bg-gray-50 rounded">
          ðŸ“Š Contexte utilisÃ©: {getContextSummary()}
        </div>
        
        <LLMSelector
          selectedLLM={selectedLLM}
          onLLMChange={setSelectedLLM}
          onGenerate={generateProjectIdeas}
          isLoading={isLoading}
        />
      </div>
      
      {/* Afficher l'amÃ©lioration de texte seulement si il y a du texte */}
      {name.trim() && (
        <div className="border-t pt-4">
          <h4 className="text-sm font-medium text-gray-700 mb-2">âœ¨ AmÃ©liorer le texte</h4>
          <AITextEnhancer
            originalText={name}
            onApply={setName}
            context={`Secteur: ${scianSectorId || 'Non spÃ©cifiÃ©'}`}
            placeholder="Description du projet IA-SST"
          />
        </div>
      )}
    </div>
  );
};

export { AIEnhancedNameInput };